{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Plaintext: ridhowalidhayinrifai\n",
      "Hasil Enkripsi: hmqbmmldblvqccehdvio\n",
      "Hasil Dekripsi: ridhowalidhayinrifai\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from egcd import egcd  # Jika belum ada install modul dengan pip install egcd\n",
    "\n",
    "alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n",
    "\n",
    "letter_to_index = dict(zip(alphabet, range(len(alphabet))))\n",
    "index_to_letter = dict(zip(range(len(alphabet)), alphabet))\n",
    "\n",
    "\n",
    "def matrix_mod_inv(matrix, modulus):\n",
    "   #saya menemukan modulus matriks terbalik dengan\n",
    "   # Langkah 1) Temukan determinan\n",
    "   # Langkah 2) Temukan nilai determinan dalam modulus tertentu (biasanya panjang alfabet)\n",
    "   # Langkah 3) Ambil bahwa det_inv kali matriks det*inverted (ini kemudian akan menjadi adjoint) di mod 26\n",
    "     \n",
    "\n",
    "    det = int(np.round(np.linalg.det(matrix)))  # Langkah 1)\n",
    "    det_inv = egcd(det, modulus)[1] % modulus  # Langkah 2)\n",
    "    matrix_modulus_inv = (\n",
    "        det_inv * np.round(det * np.linalg.inv(matrix)).astype(int) % modulus\n",
    "    )  # Langkah 3)\n",
    "\n",
    "    return matrix_modulus_inv\n",
    "\n",
    "\n",
    "def encrypt(message, K):\n",
    "    encrypted = \"\"\n",
    "    message_in_numbers = []\n",
    "\n",
    "    for letter in message:\n",
    "        message_in_numbers.append(letter_to_index[letter])\n",
    "\n",
    "    split_P = [\n",
    "        message_in_numbers[i : i + int(K.shape[0])]\n",
    "        for i in range(0, len(message_in_numbers), int(K.shape[0]))\n",
    "    ]\n",
    "\n",
    "    for P in split_P:\n",
    "        P = np.transpose(np.asarray(P))[:, np.newaxis]\n",
    "\n",
    "        while P.shape[0] != K.shape[0]:\n",
    "            P = np.append(P, letter_to_index[\" \"])[:, np.newaxis]\n",
    "\n",
    "        numbers = np.dot(K, P) % len(alphabet)\n",
    "        n = numbers.shape[0]  # panjang dari enkripsi dalam nomor\n",
    "\n",
    "        # Petakan kembali untuk mendapatkan teks terenkripsi\n",
    "        for idx in range(n):\n",
    "            number = int(numbers[idx, 0])\n",
    "            encrypted += index_to_letter[number]\n",
    "\n",
    "    return encrypted\n",
    "\n",
    "\n",
    "def decrypt(cipher, Kinv):\n",
    "    decrypted = \"\"\n",
    "    cipher_in_numbers = []\n",
    "\n",
    "    for letter in cipher:\n",
    "        cipher_in_numbers.append(letter_to_index[letter])\n",
    "\n",
    "    split_C = [\n",
    "        cipher_in_numbers[i : i + int(Kinv.shape[0])]\n",
    "        for i in range(0, len(cipher_in_numbers), int(Kinv.shape[0]))\n",
    "    ]\n",
    "\n",
    "    for C in split_C:\n",
    "        C = np.transpose(np.asarray(C))[:, np.newaxis]\n",
    "        numbers = np.dot(Kinv, C) % len(alphabet)\n",
    "        n = numbers.shape[0]\n",
    "\n",
    "        for idx in range(n):\n",
    "            number = int(numbers[idx, 0])\n",
    "            decrypted += index_to_letter[number]\n",
    "\n",
    "    return decrypted\n",
    "\n",
    "\n",
    "def main():\n",
    "    #pesan yang ingin di enkripsi dan dekripsi\n",
    "    message = \"ridhowalidhayinrifai\"\n",
    "    \n",
    "    K = np.matrix([[3, 1], [6, 5]])\n",
    "    Kinv = matrix_mod_inv(K, len(alphabet))\n",
    "\n",
    "    encrypted_message = encrypt(message, K)\n",
    "    decrypted_message = decrypt(encrypted_message, Kinv)\n",
    "\n",
    "    print(\"Plaintext: \" + message)\n",
    "    print(\"Hasil Enkripsi: \" + encrypted_message)\n",
    "    print(\"Hasil Dekripsi: \" + decrypted_message)\n",
    "\n",
    "\n",
    "main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
